<!DOCTYPE HTML>
<html>
<head>
    <title>TradingView Advanced Charts example</title>

    <!-- The script that loads Advanced Charts -->
    <script type="text/javascript" src="charting_library_cloned_data/charting_library/charting_library.js"></script>

    <!-- Custom datafeed module -->
    <script type="module">
        // --- helpers.js content (start) ---
        const apiKey = "YOUR_CRYPTOCOMPARE_API_KEY"; // Replace with your actual API key

        async function makeApiRequest(path) {
            try {
                const url = new URL(`https://min-api.cryptocompare.com/${path}`);
                url.searchParams.append('api_key', apiKey);
                const response = await fetch(url.toString());
                return response.json();
            } catch (error) {
                throw new Error(`CryptoCompare request error: ${error.status}`);
            }
        }

        function generateSymbol(exchange, fromSymbol, toSymbol) {
            const short = `${fromSymbol}/${toSymbol}`;
            return {
                short,
                full: `${exchange}:${short}`,
            };
        }

        function parseFullSymbol(fullSymbol) {
            const match = fullSymbol.match(/^(\w+):(\w+)\/(\w+)$/);
            if (!match) {
                return null;
            }
            return { exchange: match[1], fromSymbol: match[2], toSymbol: match[3] };
        }
        // --- helpers.js content (end) ---

        // --- streaming.js content (start) ---
        const socket = new WebSocket('wss://streamer.cryptocompare.com/v2?api_key=' + apiKey);
        const channelToSubscription = new Map();

        socket.addEventListener('open', () => {
            console.log('[socket] Connected');
        });

        socket.addEventListener('close', (reason) => {
            console.log('[socket] Disconnected:', reason);
        });

        socket.addEventListener('error', (error) => {
            console.log('[socket] Error:', error);
        });

        socket.addEventListener('message', (event) => {
            const data = JSON.parse(event.data);
            console.log('[socket] Message:', data);
            const {
                TYPE: eventTypeStr,
                M: exchange,
                FSYM: fromSymbol,
                TSYM: toSymbol,
                TS: tradeTimeStr,
                P: tradePriceStr,
            } = data;

            if (parseInt(eventTypeStr) !== 0) {
                return;
            }

            const tradePrice = parseFloat(tradePriceStr);
            const tradeTime = parseInt(tradeTimeStr);
            const channelString = `0~${exchange}~${fromSymbol}~${toSymbol}`;
            const subscriptionItem = channelToSubscription.get(channelString);

            if (subscriptionItem === undefined) {
                return;
            }

            const lastDailyBar = subscriptionItem.lastDailyBar;
            const nextDailyBarTime = getNextDailyBarTime(lastDailyBar.time);

            let bar;
            if (tradeTime >= nextDailyBarTime) {
                bar = {
                    time: nextDailyBarTime,
                    open: tradePrice,
                    high: tradePrice,
                    low: tradePrice,
                    close: tradePrice,
                };
                console.log('[socket] Generate new bar', bar);
            } else {
                bar = {
                    ...lastDailyBar,
                    high: Math.max(lastDailyBar.high, tradePrice),
                    low: Math.min(lastDailyBar.low, tradePrice),
                    close: tradePrice,
                };
                console.log('[socket] Update the latest bar by price', tradePrice);
            }

            subscriptionItem.lastDailyBar = bar;

            subscriptionItem.handlers.forEach((handler) => handler.callback(bar));
        });

        function getNextDailyBarTime(barTime) {
            const date = new Date(barTime * 1000);
            date.setDate(date.getDate() + 1);
            return date.getTime() / 1000;
        }

        function subscribeOnStream(symbolInfo, resolution, onRealtimeCallback, subscriberUID, onResetCacheNeededCallback, lastDailyBar) {
            const parsedSymbol = parseFullSymbol(symbolInfo.full_name);
            const channelString = `0~${parsedSymbol.exchange}~${parsedSymbol.fromSymbol}~${parsedSymbol.toSymbol}`;
            const handler = {
                id: subscriberUID,
                callback: onRealtimeCallback,
            };

            let subscriptionItem = channelToSubscription.get(channelString);
            if (subscriptionItem) {
                subscriptionItem.handlers.push(handler);
                return;
            }

            subscriptionItem = {
                subscriberUID,
                resolution,
                lastDailyBar,
                handlers: [handler],
            };

            channelToSubscription.set(channelString, subscriptionItem);

            console.log('[subscribeBars]: Subscribe to streaming. Channel:', channelString);

            const subRequest = {
                action: 'SubAdd',
                subs: [channelString],
            };

            socket.send(JSON.stringify(subRequest));
        }

        function unsubscribeFromStream(subscriberUID) {
            for (const channelString of channelToSubscription.keys()) {
                const subscriptionItem = channelToSubscription.get(channelString);
                const handlerIndex = subscriptionItem.handlers.findIndex((handler) => handler.id === subscriberUID);

                if (handlerIndex !== -1) {
                    subscriptionItem.handlers.splice(handlerIndex, 1);

                    if (subscriptionItem.handlers.length === 0) {
                        console.log('[unsubscribeBars]: Unsubscribe from streaming. Channel:', channelString);
                        const subRequest = {
                            action: 'SubRemove',
                            subs: [channelString],
                        };
                        socket.send(JSON.stringify(subRequest));
                        channelToSubscription.delete(channelString);
                        break;
                    }
                }
            }
        }
        // --- streaming.js content (end) ---


        // --- datafeed.js content (start) ---
        const lastBarsCache = new Map();

        const configurationData = {
            supported_resolutions: ['1D', '1W', '1M'],
            exchanges: [
                { value: 'Bitfinex', name: 'Bitfinex', desc: 'Bitfinex' },
                { value: 'Kraken', name: 'Kraken', desc: 'Kraken bitcoin exchange' },
            ],
            symbols_types: [{ name: 'crypto', value: 'crypto' }]
        };

        async function getAllSymbols() {
            const data = await makeApiRequest('data/v3/all/exchanges');
            let allSymbols = [];

            for (const exchange of configurationData.exchanges) {
                const pairs = data.Data[exchange.value].pairs;

                for (const leftPairPart of Object.keys(pairs)) {
                    const symbols = pairs[leftPairPart].map(rightPairPart => {
                        const symbol = generateSymbol(exchange.value, leftPairPart, rightPairPart);
                        return {
                            symbol: symbol.short,
                            full_name: symbol.full,
                            description: symbol.short,
                            exchange: exchange.value,
                            type: 'crypto',
                        };
                    });
                    allSymbols = [...allSymbols, ...symbols];
                }
            }
            return allSymbols;
        }

        const Datafeed = {
            onReady: (callback) => {
                console.log('[onReady]: Method call');
                setTimeout(() => callback(configurationData));
            },

            searchSymbols: async (userInput, exchange, symbolType, onResultReadyCallback) => {
                console.log('[searchSymbols]: Method call');
                const symbols = await getAllSymbols();
                const newSymbols = symbols.filter(symbol => {
                    const isExchangeValid = exchange === '' || symbol.exchange === exchange;
                    const isFullSymbolContainsInput = symbol.full_name
                        .toLowerCase()
                        .indexOf(userInput.toLowerCase()) !== -1;
                    return isExchangeValid && isFullSymbolContainsInput;
                });
                onResultReadyCallback(newSymbols);
            },

            resolveSymbol: async (symbolName, onSymbolResolvedCallback, onResolveErrorCallback, extension) => {
                console.log('[resolveSymbol]: Method call', symbolName);
                const symbols = await getAllSymbols();
                const symbolItem = symbols.find(({ full_name }) => full_name === symbolName);

                if (!symbolItem) {
                    console.log('[resolveSymbol]: Cannot resolve symbol', symbolName);
                    onResolveErrorCallback('cannot resolve symbol');
                    return;
                }

                const symbolInfo = {
                    ticker: symbolItem.full_name,
                    name: symbolItem.symbol,
                    description: symbolItem.description,
                    type: symbolItem.type,
                    session: '24x7',
                    timezone: 'Etc/UTC',
                    exchange: symbolItem.exchange,
                    minmov: 1,
                    pricescale: 100,
                    has_intraday: false,
                    has_no_volume: true,
                    has_weekly_and_monthly: false,
                    supported_resolutions: configurationData.supported_resolutions,
                    volume_precision: 2,
                    data_status: 'streaming',
                };

                console.log('[resolveSymbol]: Symbol resolved', symbolName);
                onSymbolResolvedCallback(symbolInfo);
            },

            getBars: async (symbolInfo, resolution, periodParams, onHistoryCallback, onErrorCallback) => {
                const { from, to, firstDataRequest } = periodParams;
                console.log('[getBars]: Method call', symbolInfo, resolution, from, to);
                const parsedSymbol = parseFullSymbol(symbolInfo.full_name);

                const urlParameters = {
                    e: parsedSymbol.exchange,
                    fsym: parsedSymbol.fromSymbol,
                    tsym: parsedSymbol.toSymbol,
                    toTs: to,
                    limit: 2000,
                };

                const query = Object.keys(urlParameters)
                    .map(name => `${name}=${encodeURIComponent(urlParameters[name])}`)
                    .join('&');

                try {
                    const data = await makeApiRequest(`data/histoday?${query}`);

                    if (data.Response && data.Response === 'Error' || data.Data.length === 0) {
                        onHistoryCallback([], { noData: true });
                        return;
                    }

                    let bars = [];
                    data.Data.forEach(bar => {
                        if (bar.time >= from && bar.time < to) {
                            bars = [...bars, {
                                time: bar.time * 1000,
                                low: bar.low,
                                high: bar.high,
                                open: bar.open,
                                close: bar.close,
                            }];
                        }
                    });

                    if (firstDataRequest) {
                        lastBarsCache.set(symbolInfo.full_name, { ...bars[bars.length - 1] });
                    }

                    console.log(`[getBars]: returned ${bars.length} bar(s)`);
                    onHistoryCallback(bars, { noData: false });
                } catch (error) {
                    console.log('[getBars]: Get error', error);
                    onErrorCallback(error);
                }
            },

            subscribeBars: (symbolInfo, resolution, onRealtimeCallback, subscriberUID, onResetCacheNeededCallback) => {
                console.log('[subscribeBars]: Method call with subscriberUID:', subscriberUID);
                subscribeOnStream(
                    symbolInfo,
                    resolution,
                    onRealtimeCallback,
                    subscriberUID,
                    onResetCacheNeededCallback,
                    lastBarsCache.get(symbolInfo.full_name),
                );
            },

            unsubscribeBars: (subscriberUID) => {
                console.log('[unsubscribeBars]: Method call with subscriberUID:', subscriberUID);
                unsubscribeFromStream(subscriberUID);
            },
        };

        // --- datafeed.js content (end) ---


        // --- main.js content (start) ---
        window.tvWidget = new TradingView.widget({
            symbol: 'Bitfinex:BTC/USD',             // Default symbol
            interval: '1D',                         // Default interval
            fullscreen: true,                       // Displays the chart in the fullscreen mode
            container: 'tv_chart_container',        // Reference to an attribute of the DOM element
            datafeed: Datafeed,
            library_path: 'charting_library_cloned_data/charting_library/',
        });
        // --- main.js content (end) ---

    </script>
</head>
<body style="margin:0px;">
    <!-- A container for the library widget -->
    <div id="tv_chart_container"></div>
</body>
</html>